/* The following code was generated by JFlex 1.4.3 on 23/04/17 15:30 */


/*
 * TokenMaker for the Relational Algebra Language (based on Java's TokenMaker).
 */
package es.ull.etsii.jitrax.tokenMaker;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/04/17 15:30 from the specification file
 * <tt>/home/teguayco/Escritorio/ra.jflex</tt>
 */
public class RelationalAlgebraTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 6;
  public static final int DOCCOMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\11\1\0\1\23\1\20\22\0\1\23\1\53\1\16"+
    "\1\21\1\22\1\53\1\55\1\10\2\100\1\25\1\46\1\45\1\34"+
    "\1\35\1\24\1\4\1\5\2\17\4\7\2\3\1\56\1\115\1\47"+
    "\1\50\1\52\1\54\1\77\1\6\1\27\1\104\1\70\1\33\1\32"+
    "\2\1\1\106\1\103\1\1\1\26\1\1\1\107\1\102\1\101\1\1"+
    "\1\75\1\111\1\105\1\112\1\116\1\1\1\31\1\114\1\1\1\100"+
    "\1\12\1\100\1\51\1\2\1\0\1\41\1\30\1\64\1\62\1\40"+
    "\1\15\1\73\1\60\1\66\1\110\1\76\1\42\1\67\1\14\1\61"+
    "\1\63\1\1\1\37\1\43\1\36\1\13\1\72\1\71\1\65\1\74"+
    "\1\1\1\117\1\51\1\44\1\57\170\0\1\113\u2131\0\1\113\uddd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\2\1\4\1\5\3\2"+
    "\1\6\1\1\1\7\4\10\4\2\1\11\1\2\5\12"+
    "\2\10\6\2\1\13\10\2\2\10\1\2\1\14\1\15"+
    "\5\14\1\16\10\14\1\17\3\14\1\1\2\20\1\21"+
    "\1\3\1\20\1\21\2\20\1\22\2\20\1\2\1\4"+
    "\1\23\1\0\1\4\4\2\2\6\1\24\1\25\1\26"+
    "\3\2\1\0\1\12\5\2\1\13\11\2\2\0\1\27"+
    "\4\0\1\30\2\0\1\31\22\0\1\1\1\3\1\21"+
    "\1\0\2\22\1\3\1\22\1\4\1\32\2\4\1\23"+
    "\1\4\3\2\1\6\1\33\1\6\1\34\11\2\1\1"+
    "\10\2\37\0\1\1\2\20\1\4\1\2\1\6\1\35"+
    "\1\36\10\2\1\1\5\2\2\0\1\37\2\0\1\40"+
    "\10\0\1\41\17\0\1\42\1\1\1\4\1\2\1\6"+
    "\6\2\1\1\5\2\35\0\1\1\1\4\1\2\1\6"+
    "\1\10\3\2\1\1\2\2\1\10\22\0\4\2\1\1"+
    "\2\2\2\0\1\41\6\0\6\2\11\0\4\2\5\0"+
    "\2\2\5\0\2\2\2\0\4\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\120\0\240\0\360\0\u0140\0\u0190\0\u01e0\0\u0230"+
    "\0\u0280\0\u02d0\0\u0320\0\u0370\0\u03c0\0\u0410\0\u0460\0\u0320"+
    "\0\u04b0\0\u0500\0\u0550\0\u0190\0\u05a0\0\u05f0\0\u0640\0\u0690"+
    "\0\u06e0\0\u0320\0\u0320\0\u0730\0\u0780\0\u0550\0\u07d0\0\u0320"+
    "\0\u0820\0\u0320\0\u0870\0\u08c0\0\u0910\0\u0960\0\u09b0\0\u0a00"+
    "\0\u0a50\0\u0aa0\0\u0af0\0\u0b40\0\u0b90\0\u0be0\0\u0c30\0\u0c80"+
    "\0\u0cd0\0\u0d20\0\u0140\0\u0d70\0\u0dc0\0\u0320\0\u0e10\0\u0e60"+
    "\0\u0eb0\0\u0f00\0\u0f50\0\u0320\0\u0fa0\0\u0ff0\0\u1040\0\u1090"+
    "\0\u10e0\0\u1130\0\u1180\0\u11d0\0\u0320\0\u1220\0\u1270\0\u12c0"+
    "\0\u1310\0\u1360\0\u13b0\0\u1360\0\u1360\0\u1400\0\u1450\0\u14a0"+
    "\0\u14f0\0\u1540\0\u1590\0\u15e0\0\u1630\0\u1680\0\u0320\0\u16d0"+
    "\0\u1720\0\u1770\0\u17c0\0\u1810\0\u1860\0\u18b0\0\u1900\0\u0320"+
    "\0\u0320\0\u1950\0\u19a0\0\u19f0\0\u1a40\0\u0550\0\u1a90\0\u1ae0"+
    "\0\u1b30\0\u1b80\0\u1bd0\0\u1c20\0\u1c70\0\u1cc0\0\u1d10\0\u1d60"+
    "\0\u1db0\0\u1e00\0\u1e50\0\u1ea0\0\u1ef0\0\u1f40\0\u1f90\0\u1fe0"+
    "\0\u0320\0\u2030\0\u2080\0\u20d0\0\u2120\0\u0320\0\u2170\0\u21c0"+
    "\0\u0320\0\u2210\0\u2260\0\u22b0\0\u2300\0\u2350\0\u23a0\0\u23f0"+
    "\0\u2440\0\u2490\0\u24e0\0\u2530\0\u2580\0\u25d0\0\u2620\0\u2670"+
    "\0\u26c0\0\u2710\0\u2760\0\u27b0\0\u2800\0\u2850\0\u28a0\0\u28f0"+
    "\0\u1360\0\u2940\0\u2990\0\u29e0\0\u0320\0\u2a30\0\u2a80\0\u16d0"+
    "\0\u2ad0\0\u2b20\0\u2b70\0\u2bc0\0\u2c10\0\u0320\0\u2c60\0\u2cb0"+
    "\0\u2d00\0\u2d50\0\u2da0\0\u2df0\0\u2e40\0\u2e90\0\u2ee0\0\u2f30"+
    "\0\u2f80\0\u2fd0\0\u3020\0\u3070\0\u30c0\0\u3110\0\u3160\0\u31b0"+
    "\0\u3200\0\u3250\0\u32a0\0\u32f0\0\u3340\0\u3390\0\u33e0\0\u3430"+
    "\0\u3480\0\u34d0\0\u3520\0\u3570\0\u35c0\0\u3610\0\u3660\0\u36b0"+
    "\0\u3700\0\u3750\0\u37a0\0\u37f0\0\u3840\0\u3890\0\u38e0\0\u3930"+
    "\0\u3980\0\u39d0\0\u3a20\0\u3a70\0\u3ac0\0\u3b10\0\u3b60\0\u3bb0"+
    "\0\u3c00\0\u3c50\0\u2940\0\u3ca0\0\u3cf0\0\u3d40\0\u3d90\0\u0320"+
    "\0\u0190\0\u3de0\0\u3e30\0\u3e80\0\u3ed0\0\u3f20\0\u3f70\0\u3fc0"+
    "\0\u4010\0\u4060\0\u40b0\0\u4100\0\u4150\0\u41a0\0\u41f0\0\u4240"+
    "\0\u4290\0\u42e0\0\u4330\0\u4380\0\u43d0\0\u4420\0\u4470\0\u44c0"+
    "\0\u4510\0\u4560\0\u45b0\0\u4600\0\u4650\0\u0320\0\u46a0\0\u46f0"+
    "\0\u4740\0\u4790\0\u47e0\0\u4830\0\u4880\0\u48d0\0\u4920\0\u4970"+
    "\0\u49c0\0\u4a10\0\u4a60\0\u4ab0\0\u4b00\0\u4b50\0\u4ba0\0\u4bf0"+
    "\0\u4c40\0\u4c90\0\u4ce0\0\u4d30\0\u4d80\0\u4dd0\0\u4e20\0\u4e70"+
    "\0\u4ec0\0\u4f10\0\u4f60\0\u4fb0\0\u5000\0\u5050\0\u50a0\0\u42e0"+
    "\0\u50f0\0\u43d0\0\u5140\0\u5190\0\u51e0\0\u5230\0\u5280\0\u52d0"+
    "\0\u5320\0\u5370\0\u53c0\0\u5410\0\u5460\0\u54b0\0\u5500\0\u5550"+
    "\0\u55a0\0\u55f0\0\u5640\0\u5690\0\u56e0\0\u5730\0\u5780\0\u57d0"+
    "\0\u5820\0\u5870\0\u4b50\0\u58c0\0\u5910\0\u5960\0\u59b0\0\u1770"+
    "\0\u5a00\0\u5a50\0\u5aa0\0\u5af0\0\u5b40\0\u5b90\0\u1f40\0\u5be0"+
    "\0\u5c30\0\u5c80\0\u5cd0\0\u5d20\0\u5d70\0\u5dc0\0\u5e10\0\u5e60"+
    "\0\u5eb0\0\u5f00\0\u5f50\0\u5fa0\0\u5ff0\0\u6040\0\u6090\0\u60e0"+
    "\0\u6130\0\u6180\0\u61d0\0\u6220\0\u6270\0\u62c0\0\u6310\0\u6360"+
    "\0\u63b0\0\u6400\0\u6450\0\u64a0\0\u64f0\0\u6540\0\u6590\0\u65e0"+
    "\0\u6630\0\u6680\0\u66d0\0\u6720\0\u6770\0\u67c0\0\u6810\0\u6860"+
    "\0\u68b0\0\u6900\0\u6950\0\u69a0\0\u69f0\0\u6a40\0\u6a90\0\u6ae0"+
    "\0\u6b30\0\u6b80\0\u6bd0\0\u6c20\0\u6c70\0\u6cc0\0\u6d10\0\u6d60"+
    "\0\u6db0\0\u6e00\0\u6e50\0\u6ea0\0\u6ef0\0\u6f40\0\u6f90\0\u6fe0"+
    "\0\u7030\0\u7080\0\u70d0\0\u7120\0\u7170\0\u71c0\0\u7210\0\u7260";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\7\1\11\1\7\1\12"+
    "\1\13\1\5\1\14\1\15\1\16\1\17\1\7\1\20"+
    "\1\5\1\6\1\21\1\22\1\23\3\6\1\24\2\6"+
    "\1\25\1\26\1\27\2\6\1\30\1\6\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\23\1\37\1\36\1\40"+
    "\1\41\1\40\1\42\1\6\1\43\1\44\1\45\1\46"+
    "\1\24\1\47\1\6\1\50\1\6\1\24\4\6\1\51"+
    "\1\32\1\52\1\53\1\54\1\55\1\6\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\24\1\64\1\6\1\32"+
    "\11\65\1\66\3\65\1\67\7\65\1\70\32\65\1\71"+
    "\10\65\1\72\26\65\11\73\1\74\3\73\1\75\7\73"+
    "\1\76\21\73\1\77\10\73\1\100\10\73\1\101\5\73"+
    "\1\102\17\73\1\103\11\104\1\105\3\104\1\106\42\104"+
    "\1\107\10\104\1\110\26\104\10\5\2\0\4\5\1\0"+
    "\1\5\1\0\2\5\3\0\6\5\2\0\6\5\14\0"+
    "\20\5\1\0\14\5\1\0\1\5\1\0\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\14\0\17\6\1\5\1\0"+
    "\12\6\1\5\1\6\1\0\1\6\1\0\2\112\1\113"+
    "\3\7\1\112\1\7\2\0\3\112\1\114\1\0\1\7"+
    "\1\0\2\112\3\0\1\115\3\112\1\114\1\116\1\0"+
    "\1\117\2\112\1\116\1\112\1\115\1\112\14\0\2\112"+
    "\1\114\5\112\1\114\7\112\1\0\14\112\1\0\1\112"+
    "\1\0\2\112\1\120\1\121\2\122\1\112\1\122\2\0"+
    "\3\112\1\114\1\0\1\122\1\0\2\112\3\0\1\115"+
    "\2\123\1\124\1\114\1\116\1\0\1\117\2\112\1\116"+
    "\1\112\1\115\1\112\14\0\2\112\1\114\2\112\1\124"+
    "\2\112\1\114\7\112\1\0\14\112\1\0\1\112\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\6\6\1\125\3\6\1\5\1\6\1\0"+
    "\1\6\1\0\10\126\1\127\1\130\1\131\105\126\120\0"+
    "\1\5\7\6\2\0\1\111\1\6\1\132\1\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\3\6"+
    "\1\133\2\6\14\0\1\6\1\134\15\6\1\5\1\0"+
    "\7\6\1\60\2\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\3\6\1\135\2\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\11\17\1\136\1\137\3\17\1\140\101\17"+
    "\23\0\1\21\120\0\1\141\1\142\22\0\1\40\117\0"+
    "\1\40\103\0\1\40\13\0\1\40\52\0\3\117\1\0"+
    "\1\117\7\0\1\117\100\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\6\1\143\4\6\14\0\17\6\1\5\1\0"+
    "\12\6\1\5\1\6\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\111\1\6\1\144\1\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\2\6\1\145\3\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\47\0\1\40\1\0\1\40\116\0\1\146\1\40"+
    "\117\0\1\40\1\0\1\147\115\0\1\40\4\0\1\40"+
    "\42\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\6\1\24"+
    "\4\6\14\0\17\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\14\0\6\6\1\150\10\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\1\6\1\151\4\6\14\0\17\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\3\6\1\152\2\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\1\6\1\153\1\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\14\0\17\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\14\0\17\6\1\5\1\0\5\6\1\154\4\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\2\155\3\5"+
    "\1\155\1\5\2\0\1\5\3\155\1\0\1\5\1\0"+
    "\1\5\1\155\3\0\6\155\2\0\6\155\14\0\17\155"+
    "\1\5\1\0\12\155\1\5\1\155\1\0\1\155\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\15\6"+
    "\1\156\1\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\15\6\1\24\1\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\1\6\1\157"+
    "\10\6\1\5\1\6\1\0\1\6\1\0\1\5\5\6"+
    "\1\160\1\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\6\6\1\161\3\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\5\6\1\162\1\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\1\6\1\163"+
    "\1\54\7\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\14\0\1\6\1\164"+
    "\15\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\5\6\1\165\2\0\6\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\17\6\1\5\1\0\6\6\1\166\3\6\1\5"+
    "\1\6\1\0\1\6\75\0\1\42\23\0\11\65\1\0"+
    "\3\65\1\0\7\65\1\0\32\65\1\0\10\65\1\0"+
    "\26\65\36\0\1\167\27\0\1\170\55\0\1\171\131\0"+
    "\1\172\152\0\1\173\26\0\11\73\1\0\3\73\1\0"+
    "\7\73\1\0\21\73\1\0\10\73\1\0\10\73\1\0"+
    "\5\73\1\0\17\73\37\0\1\174\27\0\1\175\55\0"+
    "\1\176\74\0\1\177\4\0\1\177\4\0\3\177\6\0"+
    "\1\200\1\0\6\177\2\0\6\177\6\0\1\201\5\0"+
    "\17\177\2\0\12\177\1\0\1\177\1\0\1\177\37\0"+
    "\1\202\152\0\1\203\64\0\1\204\1\205\1\206\1\207"+
    "\1\0\1\210\15\0\1\211\1\212\1\213\1\214\1\0"+
    "\1\215\3\0\1\216\124\0\1\217\20\0\11\104\1\0"+
    "\3\104\1\0\42\104\1\0\10\104\1\0\26\104\36\0"+
    "\1\220\27\0\1\221\67\0\1\222\152\0\1\223\26\0"+
    "\10\5\2\0\1\5\1\224\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\6\5\2\0\6\5\14\0\20\5\1\0"+
    "\14\5\1\0\1\5\1\0\10\112\2\0\4\112\1\0"+
    "\1\112\1\0\2\112\3\0\6\112\2\0\6\112\14\0"+
    "\20\112\1\0\14\112\1\0\1\112\1\0\2\112\1\113"+
    "\3\225\1\112\1\225\2\0\4\112\1\0\1\225\1\0"+
    "\2\112\3\0\6\112\2\0\6\112\14\0\20\112\1\0"+
    "\14\112\1\0\1\112\1\0\3\112\3\226\1\112\1\226"+
    "\2\0\4\112\1\0\1\226\1\0\2\112\3\0\6\112"+
    "\1\227\1\0\6\112\2\0\1\227\11\0\20\112\1\0"+
    "\14\112\1\0\1\112\1\0\3\112\3\117\1\112\1\117"+
    "\2\0\3\112\1\114\1\0\1\117\1\0\2\112\3\0"+
    "\4\112\1\114\1\116\2\0\2\112\1\116\3\112\14\0"+
    "\2\112\1\114\5\112\1\114\7\112\1\0\14\112\1\0"+
    "\1\112\1\0\2\112\1\120\1\112\2\230\1\112\1\230"+
    "\2\0\4\112\1\0\1\230\1\0\2\112\3\0\6\112"+
    "\2\0\6\112\14\0\20\112\1\0\14\112\1\0\1\112"+
    "\1\0\3\112\3\121\1\112\1\121\2\0\3\112\1\114"+
    "\1\0\1\121\1\0\2\112\3\0\4\112\1\114\1\116"+
    "\1\0\1\117\2\112\1\116\3\112\14\0\2\112\1\114"+
    "\5\112\1\114\7\112\1\0\14\112\1\0\1\112\1\0"+
    "\2\112\1\120\1\121\2\122\1\112\1\122\2\0\3\112"+
    "\1\114\1\0\1\122\1\0\2\112\3\0\1\231\3\112"+
    "\1\114\1\116\1\0\1\117\2\112\1\116\1\112\1\231"+
    "\1\112\14\0\2\112\1\114\5\112\1\114\7\112\1\0"+
    "\14\112\1\0\1\112\1\0\4\112\2\232\2\112\2\0"+
    "\4\112\1\0\1\112\1\0\2\112\3\0\6\112\2\0"+
    "\6\112\14\0\20\112\1\0\14\112\1\0\1\112\1\0"+
    "\3\112\5\233\2\0\3\112\1\233\1\0\1\233\1\0"+
    "\2\112\3\0\1\112\2\233\1\112\2\233\2\0\2\112"+
    "\2\233\2\112\14\0\2\112\1\233\1\112\1\233\3\112"+
    "\1\233\7\112\1\0\3\112\1\233\10\112\1\0\1\112"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\10\6\1\24\6\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\10\234\1\235\1\0\106\234\10\0"+
    "\1\235\107\0\4\234\2\236\1\234\1\237\1\240\1\0"+
    "\1\126\1\241\3\126\1\236\10\234\1\126\5\234\2\126"+
    "\60\234\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\6\6\1\242\10\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\243\5\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\1\24\5\6\14\0\17\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\4\6\1\244\1\6\14\0\17\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\12\136"+
    "\1\245\3\136\1\246\105\136\2\17\1\136\2\17\1\0"+
    "\1\17\1\247\4\17\10\136\1\17\5\136\2\17\60\136"+
    "\25\0\1\250\72\0\1\5\7\6\2\0\1\111\1\251"+
    "\2\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\2\6\1\24\14\6\1\5\1\0"+
    "\12\6\1\5\1\6\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\4\6\1\252\1\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\51\0"+
    "\1\40\1\0\1\36\45\0\1\5\7\6\2\0\1\111"+
    "\2\6\1\253\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\12\6\1\254\4\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\14\0\1\6\1\255"+
    "\15\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\1\6\1\256"+
    "\4\6\14\0\17\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\257\5\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\4\6"+
    "\1\260\1\6\2\0\6\6\14\0\17\6\1\5\1\0"+
    "\12\6\1\5\1\6\1\0\1\261\1\0\1\5\7\155"+
    "\2\0\1\262\3\155\1\0\1\155\1\0\1\5\1\155"+
    "\3\0\6\155\2\0\6\155\14\0\17\155\1\5\1\0"+
    "\12\155\1\5\1\155\1\0\1\155\1\0\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\14\0\17\6\1\5\1\0"+
    "\1\6\1\263\10\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\5\6\1\264\4\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\15\6\1\265\1\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\4\6\1\266"+
    "\5\6\1\5\1\6\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\14\0\17\6\1\5\1\0"+
    "\4\6\1\267\5\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\4\6\1\24\5\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\6\6\1\270\10\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\1\271"+
    "\5\6\2\0\6\6\14\0\17\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\17\6\1\5\1\0\5\6"+
    "\1\272\4\6\1\5\1\6\1\0\1\6\64\0\1\273"+
    "\76\0\1\274\113\0\1\275\152\0\1\276\111\0\1\277"+
    "\76\0\1\300\55\0\52\177\1\201\45\177\1\0\1\177"+
    "\4\0\1\177\4\0\3\177\10\0\6\177\2\0\6\177"+
    "\6\0\1\201\5\0\17\177\2\0\12\177\1\0\1\177"+
    "\1\0\1\177\37\0\1\301\152\0\1\302\41\0\1\303"+
    "\44\0\1\304\1\305\76\0\1\306\144\0\1\307\45\0"+
    "\1\310\144\0\1\311\25\0\1\312\61\0\1\313\127\0"+
    "\1\314\120\0\1\315\117\0\1\316\72\0\1\317\143\0"+
    "\1\320\121\0\1\321\17\0\1\322\1\0\1\323\1\0"+
    "\1\324\3\0\1\325\110\0\1\326\76\0\1\327\113\0"+
    "\1\330\152\0\1\331\26\0\3\5\5\332\2\0\3\5"+
    "\1\332\1\0\1\332\1\0\2\5\3\0\1\5\2\332"+
    "\1\5\2\332\2\0\2\5\2\332\2\5\14\0\2\5"+
    "\1\332\1\5\1\332\3\5\1\332\7\5\1\0\3\5"+
    "\1\332\10\5\1\0\1\5\1\0\2\112\1\113\3\225"+
    "\1\112\1\225\2\0\4\112\1\0\1\225\1\0\2\112"+
    "\3\0\1\115\5\112\2\0\4\112\1\115\1\112\14\0"+
    "\20\112\1\0\14\112\1\0\1\112\1\0\3\112\3\226"+
    "\1\112\1\226\2\0\3\112\1\114\1\0\1\226\1\0"+
    "\2\112\3\0\4\112\1\114\1\112\2\0\6\112\14\0"+
    "\2\112\1\114\5\112\1\114\7\112\1\0\14\112\1\0"+
    "\1\112\4\0\3\226\1\0\1\226\7\0\1\226\100\0"+
    "\2\112\1\120\1\112\2\230\1\112\1\230\2\0\4\112"+
    "\1\0\1\230\1\0\2\112\3\0\1\231\5\112\2\0"+
    "\4\112\1\231\1\112\14\0\20\112\1\0\14\112\1\0"+
    "\1\112\1\0\2\112\1\333\1\112\2\232\2\112\2\0"+
    "\4\112\1\0\1\112\1\0\2\112\3\0\6\112\2\0"+
    "\6\112\14\0\20\112\1\0\14\112\1\0\1\112\1\0"+
    "\2\112\1\334\5\233\2\0\3\112\1\233\1\0\1\233"+
    "\1\0\2\112\3\0\1\231\2\233\1\112\2\233\2\0"+
    "\2\112\2\233\1\231\1\112\14\0\2\112\1\233\1\112"+
    "\1\233\3\112\1\233\7\112\1\0\3\112\1\233\10\112"+
    "\1\0\1\112\1\0\10\234\1\127\1\0\112\234\2\237"+
    "\1\234\1\237\1\235\1\0\5\234\1\237\104\234\2\126"+
    "\1\234\1\126\1\235\1\0\5\234\1\126\103\234\5\335"+
    "\1\127\1\0\3\234\1\335\1\234\1\335\7\234\2\335"+
    "\1\234\2\335\4\234\2\335\20\234\1\335\1\234\1\335"+
    "\3\234\1\335\13\234\1\335\13\234\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\1\6\1\270\15\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\1\336\2\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\5\6\1\251\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\11\136\1\0\111\136\5\337\2\136\1\245\2\136"+
    "\1\337\1\246\1\337\7\136\2\337\1\136\2\337\4\136"+
    "\2\337\20\136\1\337\1\136\1\337\3\136\1\337\13\136"+
    "\1\337\13\136\24\0\1\340\73\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\341\3\6\14\0\17\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\2\6\1\342\3\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\2\6\1\343\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\6\6\1\344\10\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\2\6\1\345\14\6\1\5\1\0"+
    "\7\6\1\252\2\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\346\5\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\2\6\1\347"+
    "\3\6\14\0\17\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\4\6\1\350"+
    "\1\6\2\0\6\6\14\0\17\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\17\6\1\5\1\0\5\6"+
    "\1\351\4\6\1\5\1\6\1\0\1\6\1\0\10\5"+
    "\2\0\1\5\1\352\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\6\5\2\0\6\5\14\0\20\5\1\0\14\5"+
    "\1\0\1\5\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\14\0\10\6\1\353\6\6\1\5\1\0\2\6"+
    "\1\271\7\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\14\0\17\6\1\5"+
    "\1\0\6\6\1\24\3\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\17\6\1\5\1\0\4\6\1\354\5\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\5\6\1\355"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\11\6\1\356"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\1\6\1\24\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\14\0\17\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\5\6\1\357\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\1\6\1\264\10\6\1\5\1\6\1\0"+
    "\1\6\57\0\1\360\101\0\1\273\142\0\1\361\71\0"+
    "\1\362\140\0\1\363\101\0\1\277\142\0\1\364\71\0"+
    "\1\365\120\0\1\366\120\0\1\367\142\0\1\370\73\0"+
    "\1\371\122\0\1\372\22\0\1\373\71\0\1\374\120\0"+
    "\1\375\1\376\73\0\1\377\146\0\1\u0100\137\0\1\u0101"+
    "\73\0\1\u0102\116\0\1\u0103\117\0\1\u0104\23\0\1\u0105"+
    "\74\0\1\u0106\146\0\1\u0107\112\0\1\u0108\117\0\1\u0109"+
    "\52\0\1\u010a\144\0\1\u010b\134\0\1\u010c\101\0\1\326"+
    "\142\0\1\u010d\71\0\1\u010e\62\0\3\5\5\u010f\2\0"+
    "\3\5\1\u010f\1\0\1\u010f\1\0\2\5\3\0\1\5"+
    "\2\u010f\1\5\2\u010f\2\0\2\5\2\u010f\2\5\14\0"+
    "\2\5\1\u010f\1\5\1\u010f\3\5\1\u010f\7\5\1\0"+
    "\3\5\1\u010f\10\5\1\0\1\5\1\0\2\112\1\334"+
    "\5\233\2\0\3\112\1\233\1\0\1\233\1\0\2\112"+
    "\3\0\1\112\2\233\1\112\2\233\2\0\2\112\2\233"+
    "\2\112\14\0\2\112\1\233\1\112\1\233\3\112\1\233"+
    "\7\112\1\0\3\112\1\233\10\112\1\0\1\112\1\0"+
    "\3\234\5\u0110\1\127\1\0\3\234\1\u0110\1\234\1\u0110"+
    "\7\234\2\u0110\1\234\2\u0110\4\234\2\u0110\20\234\1\u0110"+
    "\1\234\1\u0110\3\234\1\u0110\13\234\1\u0110\13\234\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\1\6\1\u0111\4\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\3\136\5\u0112\2\136\1\245\2\136\1\u0112\1\246"+
    "\1\u0112\7\136\2\u0112\1\136\2\u0112\4\136\2\u0112\20\136"+
    "\1\u0112\1\136\1\u0112\3\136\1\u0112\13\136\1\u0112\13\136"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\4\6"+
    "\1\u0113\12\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\2\6"+
    "\1\u0114\3\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\5\6\1\132\14\0\17\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\1\u0115\2\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\14\0\17\6\1\5\1\0"+
    "\12\6\1\5\1\6\1\0\1\6\1\0\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\2\6\1\u0116\3\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\1\6\1\u0117\4\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\5\6\1\u0118\2\0"+
    "\6\6\14\0\17\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\14\0\17\6\1\5\1\0\10\6\1\166\1\6"+
    "\1\5\1\6\1\0\1\6\1\0\3\5\5\u0119\2\0"+
    "\3\5\1\u0119\1\0\1\u0119\1\0\2\5\3\0\1\5"+
    "\2\u0119\1\5\2\u0119\2\0\2\5\2\u0119\2\5\14\0"+
    "\2\5\1\u0119\1\5\1\u0119\3\5\1\u0119\7\5\1\0"+
    "\3\5\1\u0119\10\5\1\0\1\5\1\0\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\14\0\17\6\1\5\1\0"+
    "\11\6\1\u011a\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\5\6\1\u011b\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\15\6"+
    "\1\u011c\1\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\15\6\1\u011d\1\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\3\6\1\u011e"+
    "\6\6\1\5\1\6\1\0\1\6\25\0\1\u011f\136\0"+
    "\1\273\12\0\1\360\42\0\1\362\1\u0120\5\362\1\u0120"+
    "\2\0\3\362\1\0\1\362\1\0\1\u0120\1\362\1\0"+
    "\1\362\1\u0120\6\362\2\u0120\6\362\1\0\2\u0120\1\0"+
    "\1\u0120\2\0\5\u0120\17\362\2\u0120\12\362\1\0\1\362"+
    "\1\u0120\1\362\25\0\1\u0121\136\0\1\277\12\0\1\363"+
    "\42\0\1\365\1\u0122\5\365\1\u0122\2\0\3\365\1\0"+
    "\1\365\1\0\1\u0122\1\365\1\0\1\365\1\u0122\6\365"+
    "\2\u0122\6\365\1\0\2\u0122\1\0\1\u0122\2\0\5\u0122"+
    "\17\365\2\u0122\12\365\1\0\1\365\1\u0122\1\365\62\0"+
    "\1\u0123\76\0\1\u0124\20\0\1\u0125\117\0\1\376\51\0"+
    "\1\u0126\173\0\1\u0127\70\0\1\u0128\1\0\1\u0129\135\0"+
    "\1\u012a\125\0\1\u012b\115\0\1\u012c\114\0\1\u012d\75\0"+
    "\1\u012e\121\0\1\u012f\116\0\1\u0130\117\0\1\u0131\117\0"+
    "\1\u0132\122\0\1\u0133\70\0\1\u0134\21\0\1\u0135\145\0"+
    "\1\u0136\115\0\1\u0137\115\0\1\u0138\101\0\1\u0139\101\0"+
    "\1\u013a\136\0\1\326\12\0\1\u010c\42\0\1\u010e\1\u013b"+
    "\5\u010e\1\u013b\2\0\3\u010e\1\0\1\u010e\1\0\1\u013b"+
    "\1\u010e\1\0\1\u010e\1\u013b\6\u010e\2\u013b\6\u010e\1\0"+
    "\2\u013b\1\0\1\u013b\2\0\5\u013b\17\u010e\2\u013b\12\u010e"+
    "\1\0\1\u010e\1\u013b\1\u010e\1\0\3\5\5\u013c\2\0"+
    "\3\5\1\u013c\1\0\1\u013c\1\0\2\5\3\0\1\5"+
    "\2\u013c\1\5\2\u013c\2\0\2\5\2\u013c\2\5\14\0"+
    "\2\5\1\u013c\1\5\1\u013c\3\5\1\u013c\7\5\1\0"+
    "\3\5\1\u013c\10\5\1\0\1\5\1\0\3\234\5\u013d"+
    "\1\127\1\0\3\234\1\u013d\1\234\1\u013d\7\234\2\u013d"+
    "\1\234\2\u013d\4\234\2\u013d\20\234\1\u013d\1\234\1\u013d"+
    "\3\234\1\u013d\13\234\1\u013d\13\234\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\3\6\1\u013e\2\6\14\0\17\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\3\136"+
    "\5\u013f\2\136\1\245\2\136\1\u013f\1\246\1\u013f\7\136"+
    "\2\u013f\1\136\2\u013f\4\136\2\u013f\20\136\1\u013f\1\136"+
    "\1\u013f\3\136\1\u013f\13\136\1\u013f\13\136\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\1\u0140\5\6\14\0\17\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\1\6\1\u0141\4\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\4\6\1\134\12\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\5\6\1\u0142\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\5\6\1\252\14\0\17\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\15\6\1\u0143\1\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\3\5"+
    "\5\u0144\2\0\3\5\1\u0144\1\0\1\u0144\1\0\2\5"+
    "\3\0\1\5\2\u0144\1\5\2\u0144\2\0\2\5\2\u0144"+
    "\2\5\14\0\2\5\1\u0144\1\5\1\u0144\3\5\1\u0144"+
    "\7\5\1\0\3\5\1\u0144\10\5\1\0\1\5\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\3\6\1\163\6\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\17\6\1\5\1\0\10\6\1\u0145\1\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\10\6\1\271"+
    "\1\6\1\5\1\6\1\0\1\6\1\0\1\5\5\6"+
    "\1\u0146\1\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\4\6\1\u0147\5\6\1\5\1\6\1\0"+
    "\1\6\25\0\1\362\117\0\1\365\132\0\1\u0148\121\0"+
    "\1\u0149\147\0\1\u014a\65\0\1\u014b\143\0\1\u014c\117\0"+
    "\1\u014d\47\0\1\u014e\165\0\1\u014f\77\0\1\u0150\116\0"+
    "\1\376\121\0\1\u0151\115\0\1\u0152\146\0\1\376\123\0"+
    "\1\u0153\63\0\1\u0154\145\0\1\376\120\0\1\u0155\127\0"+
    "\1\u0156\61\0\1\u0157\154\0\1\u0158\62\0\1\u0156\117\0"+
    "\1\u0159\72\0\1\u0137\130\0\1\u010e\73\0\3\5\5\6"+
    "\2\0\3\5\1\6\1\0\1\6\1\0\2\5\3\0"+
    "\1\5\2\6\1\5\2\6\2\0\2\5\2\6\2\5"+
    "\14\0\2\5\1\6\1\5\1\6\3\5\1\6\7\5"+
    "\1\0\3\5\1\6\10\5\1\0\1\5\1\0\3\234"+
    "\5\126\1\127\1\0\3\234\1\126\1\234\1\126\7\234"+
    "\2\126\1\234\2\126\4\234\2\126\20\234\1\126\1\234"+
    "\1\126\3\234\1\126\13\234\1\126\13\234\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\4\6\1\u015a\1\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\3\136\5\17\2\136\1\245\2\136\1\17\1\246\1\17"+
    "\7\136\2\17\1\136\2\17\4\136\2\17\20\136\1\17"+
    "\1\136\1\17\3\136\1\17\13\136\1\17\13\136\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\2\6\1\u015b\3\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\6\6\1\u015c\10\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\5\6\1\u015d"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\3\5\5\u015e\2\0\3\5"+
    "\1\u015e\1\0\1\u015e\1\0\2\5\3\0\1\5\2\u015e"+
    "\1\5\2\u015e\2\0\2\5\2\u015e\2\5\14\0\2\5"+
    "\1\u015e\1\5\1\u015e\3\5\1\u015e\7\5\1\0\3\5"+
    "\1\u015e\10\5\1\0\1\5\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\17\6\1\5\1\0\5\6"+
    "\1\u015f\4\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\1\u0160\5\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\67\0"+
    "\1\u0161\113\0\1\u0162\100\0\1\376\70\0\1\376\145\0"+
    "\1\u012c\113\0\1\u0133\143\0\1\u012c\74\0\1\376\122\0"+
    "\1\u0163\115\0\1\u0164\143\0\1\u0165\114\0\1\u0166\52\0"+
    "\1\u0161\164\0\1\u014b\36\0\44\u0156\1\376\53\u0156\37\0"+
    "\1\u0167\141\0\1\u0168\75\0\1\u0169\60\0\1\5\1\6"+
    "\1\u016a\5\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\1\6\1\u016b\1\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\6\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\7\6\2\0\1\111\3\6\1\0"+
    "\1\6\1\0\1\5\1\6\3\0\6\6\2\0\3\6"+
    "\1\u016c\2\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\1\0\1\5\7\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\6\6\1\u016d"+
    "\3\6\1\5\1\6\1\0\1\6\1\0\3\5\5\155"+
    "\2\0\3\5\1\155\1\0\1\155\1\0\2\5\3\0"+
    "\1\5\2\155\1\5\2\155\2\0\2\5\2\155\2\5"+
    "\14\0\2\5\1\155\1\5\1\155\3\5\1\155\7\5"+
    "\1\0\3\5\1\155\10\5\1\0\1\5\1\0\1\5"+
    "\5\6\1\u016e\1\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\1\6\1\u016f\5\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\14\0\17\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\42\0\1\u0170\121\0\1\u0171\106\0\1\u0172"+
    "\35\0\1\u0173\65\0\1\u012c\122\0\1\u0174\115\0\1\u0175"+
    "\121\0\1\u0176\137\0\1\u0177\124\0\1\u0178\31\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\14\0\17\6\1\5"+
    "\1\0\7\6\1\60\2\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\4\6\1\u0179\12\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0\1\5\7\6\2\0\1\111\1\6"+
    "\1\u017a\1\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\17\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\17\6\1\5\1\0\3\6"+
    "\1\u017b\6\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\14\0\17\6\1\5"+
    "\1\0\6\6\1\u017c\3\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\17\6\1\5\1\0\2\6\1\54\7\6\1\5\1\6"+
    "\1\0\1\6\43\0\1\376\116\0\1\u017d\144\0\1\u017e"+
    "\72\0\1\u017f\114\0\1\u0180\155\0\1\376\65\0\1\u0156"+
    "\113\0\1\u0156\117\0\1\u0181\61\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\2\6\1\24\3\6\14\0\17\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\1\6\1\u0182\5\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\17\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\5\6\1\24\2\0\6\6"+
    "\14\0\17\6\1\5\1\0\12\6\1\5\1\6\1\0"+
    "\1\6\1\0\1\5\1\6\1\u0183\5\6\2\0\1\111"+
    "\3\6\1\0\1\6\1\0\1\5\1\6\3\0\6\6"+
    "\2\0\6\6\14\0\17\6\1\5\1\0\12\6\1\5"+
    "\1\6\1\0\1\6\16\0\1\u0184\142\0\1\u0185\115\0"+
    "\1\u0186\121\0\1\u0187\147\0\1\u0188\27\0\1\5\7\6"+
    "\2\0\1\111\3\6\1\0\1\6\1\0\1\5\1\6"+
    "\3\0\6\6\2\0\6\6\14\0\3\6\1\u0189\13\6"+
    "\1\5\1\0\12\6\1\5\1\6\1\0\1\6\1\0"+
    "\1\5\7\6\2\0\1\111\3\6\1\0\1\6\1\0"+
    "\1\5\1\6\3\0\6\6\2\0\6\6\14\0\17\6"+
    "\1\5\1\0\1\u018a\11\6\1\5\1\6\1\0\1\6"+
    "\41\0\1\u018b\121\0\1\u0187\116\0\1\376\140\0\1\376"+
    "\116\0\1\u018c\36\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\1\6\1\u018d\4\6\14\0\17\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\15\6\1\u018e\1\6\1\5"+
    "\1\0\12\6\1\5\1\6\1\0\1\6\37\0\1\u0175"+
    "\145\0\1\u0156\33\0\1\5\7\6\2\0\1\111\3\6"+
    "\1\0\1\6\1\0\1\5\1\6\3\0\6\6\2\0"+
    "\6\6\14\0\1\6\1\u018f\15\6\1\5\1\0\12\6"+
    "\1\5\1\6\1\0\1\6\1\0\1\5\7\6\2\0"+
    "\1\111\3\6\1\0\1\6\1\0\1\5\1\6\3\0"+
    "\6\6\2\0\6\6\14\0\17\6\1\5\1\0\1\6"+
    "\1\u0190\10\6\1\5\1\6\1\0\1\6\1\0\1\5"+
    "\7\6\2\0\1\111\3\6\1\0\1\6\1\0\1\5"+
    "\1\6\3\0\6\6\2\0\6\6\14\0\2\6\1\345"+
    "\14\6\1\5\1\0\12\6\1\5\1\6\1\0\1\6"+
    "\1\0\1\5\7\6\2\0\1\111\3\6\1\0\1\6"+
    "\1\0\1\5\1\6\3\0\6\6\2\0\6\6\14\0"+
    "\10\6\1\353\6\6\1\5\1\0\12\6\1\5\1\6"+
    "\1\0\1\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\6\1\1\11\4\1\1\11\11\1\2\11\4\1"+
    "\1\11\1\1\1\11\23\1\1\11\5\1\1\11\10\1"+
    "\1\11\21\1\1\11\1\0\7\1\2\11\4\1\1\0"+
    "\20\1\2\0\1\11\4\0\1\11\2\0\1\11\22\0"+
    "\3\1\1\0\5\1\1\11\10\1\1\11\24\1\37\0"+
    "\6\1\1\11\17\1\2\0\1\1\2\0\1\1\10\0"+
    "\1\11\17\0\21\1\35\0\14\1\22\0\7\1\2\0"+
    "\1\1\6\0\6\1\11\0\4\1\5\0\2\1\5\0"+
    "\2\1\2\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public RelationalAlgebraTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RelationalAlgebraTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public RelationalAlgebraTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }




  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 35: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 36: break;
        case 33: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 37: break;
        case 26: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 38: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 39: break;
        case 29: 
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 40: break;
        case 22: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 41: break;
        case 7: 
          { addToken(Token.WHITESPACE);
          }
        case 42: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 43: break;
        case 27: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 44: break;
        case 17: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 45: break;
        case 8: 
          { addToken(Token.RESERVED_WORD);
          }
        case 46: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 47: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 48: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 49: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 50: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 51: break;
        case 6: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 52: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 53: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 54: break;
        case 30: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 55: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 56: break;
        case 11: 
          { addToken(Token.ANNOTATION);
          }
        case 57: break;
        case 28: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 58: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 59: break;
        case 34: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 60: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 61: break;
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 62: break;
        case 24: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 63: break;
        case 16: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 64: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 65: break;
        case 10: 
          { addToken(Token.OPERATOR);
          }
        case 66: break;
        case 12: 
          { 
          }
        case 67: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 401: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 402: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 403: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 404: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
